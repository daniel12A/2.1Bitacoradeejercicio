{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ejercicio2","provenance":[],"authorship_tag":"ABX9TyP0LBuMHq2eTJJAMbgJOwDG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Z3J-rXrVySX2","executionInfo":{"status":"ok","timestamp":1647384823989,"user_tz":360,"elapsed":551,"user":{"displayName":"SANTOS DANIEL DZIB CIAU","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh_mPNYNOunD-lLJGxPJ2Kam9NiEScBW3q_JrNv=s64","userId":"17686549783570304979"}},"outputId":"1495680f-97c8-4524-f43c-e6f88bfdeb67","colab":{"base_uri":"https://localhost:8080/","height":302}},"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 10, 5.5, 7.75, 6.625, 6.0625, 6.34375, 6.484375, 6.5546875, 6.51953125]\n","x: 6.51953125  y =  13.48046875\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["\n","import numpy as np\n","from matplotlib import pyplot as plt\n","\n","\n","def fx(t):\n","    return (t+np.power(t, 0.5))*(20-t + np.power(20-t, 0.5))-155.55\n","\n","def bisec(a, b, cota):\n","    error = 1\n","    i = 0\n","    listar = [1, 10]\n","    if fx(a)*fx(b) < 0:\n","        while error > cota:\n","            xr = (a+b)/2\n","            fxr = fx(xr)\n","            fxa = fx(a)\n","            if fxr * fxa < 0:\n","                b = xr\n","            elif fxr * fxa > 0:\n","                a = xr\n","            else:\n","                break\n","            listar.append(xr)\n","            xractual = xr\n","            if(len(listar) >= 2):\n","                xranterior = listar[-2]\n","                error = np.abs((xractual-xranterior)/xractual)\n","            else:\n","                error = 1\n","            i += 1\n","    else:\n","        print(\"No hay solución\")\n","    return listar\n","\n","raices = bisec(1, 10, 0.01)\n","y = 20-raices[-1]\n","print(raices)\n","print(\"x:\", raices[-1], \" y = \", y)\n","\n","vect = np.arange(0, 10, 0.1)\n","plt.plot(vect, fx(vect))\n","plt.grid(\"x\")\n","plt.grid(\"y\")\n","plt.show()"]}]}