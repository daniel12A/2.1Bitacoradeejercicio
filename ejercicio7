{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ejercicio7","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNxc/Zz6NyT7zQaVbTPxoQy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":385},"id":"RKR7OTFs4Cyg","executionInfo":{"status":"ok","timestamp":1647386324790,"user_tz":360,"elapsed":659,"user":{"displayName":"SANTOS DANIEL DZIB CIAU","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh_mPNYNOunD-lLJGxPJ2Kam9NiEScBW3q_JrNv=s64","userId":"17686549783570304979"}},"outputId":"5c3893fc-4cd9-481d-a5fe-c7ea32b8bae2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Iteración: 1  xsup: 2 xinf: 1  Raiz: 1.8333333333333335  Error: 0.4545454545454546\n","Iteración: 2  xsup: 1.8333333333333335 xinf: 2  Raiz: 1.940182774854611  Error: 0.030830716528689652\n","Iteración: 3  xsup: 1.940182774854611 xinf: 1.8333333333333335  Raiz: 1.9480777554702227  Error: 0.05890135638307334\n","Iteración: 4  xsup: 1.9480777554702227 xinf: 1.940182774854611  Raiz: 1.9471156026805727  Error: 0.0035605630279051587\n","La raíz es:  1.9471156026805727  f(raíz):  -0.00013141496464719182\n","Con un error de:  0.0035605630279051587\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","\n","def f(x):\n","    return np.power(x, 4)-3*np.power(x, 2)-3\n","\n","# MÉTODO DE LA SECANTE\n","\n","def secante(xinf, xsup, cota, maxiteraciones):\n","    error = 1\n","    i = 1\n","    while error > cota:\n","        # NUEVA APROXIMACIÓN (RAÍZ)\n","        xr = xinf - ((f(xinf)*(xinf-xsup))/(f(xinf)-f(xsup)))\n","        \n","        #CALCULANDO EL ERROR\n","        error = np.abs((xr-xinf)/xr)\n","        print(\"Iteración:\", i, \" xsup:\", xsup, \"xinf:\",\n","              xinf, \" Raiz:\", xr, \" Error:\", error)\n","        \n","        #REASIGNANDO VALORES\n","        xinf = xsup\n","        xsup = xr\n","        i += 1\n","        \n","        #IMPRIMIENDO EL RESULTADO DE LA RAÍZ Y EL ERROR\n","        if(error <= 0.01):\n","            print(\"La raíz es: \", xr, \" f(raíz): \", f(xr))\n","            print(\"Con un error de: \", error)\n","            plt.plot(xinf, 0, 'o', color=\"g\")\n","            plt.plot(xsup, f(xsup), 'o', color=\"y\")\n","\n","#LLAMANDO AL MÉTODO DE LA SECANTE\n","secante(1, 2, 0.01, 10)\n","\n","#REALIZANDO LA GRÁFICA\n","x = np.linspace(1, 2, 7)\n","plt.plot(x, f(x))\n","plt.title(\"Ejercicio 7\")\n","plt.grid('on')\n","plt.show()\n"]}]}