{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"EJERCICIO3","provenance":[],"authorship_tag":"ABX9TyPzVNWoV11gbev1sMwczO7r"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"DD_amGSqzqVt","executionInfo":{"status":"ok","timestamp":1647385174972,"user_tz":360,"elapsed":382,"user":{"displayName":"SANTOS DANIEL DZIB CIAU","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh_mPNYNOunD-lLJGxPJ2Kam9NiEScBW3q_JrNv=s64","userId":"17686549783570304979"}},"outputId":"1a149602-7da2-4d06-85d1-a5d1e512a3bd","colab":{"base_uri":"https://localhost:8080/","height":334}},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: divide by zero encountered in double_scalars\n","  \"\"\"\n"]},{"output_type":"stream","name":"stdout","text":["[1, 10, 0.5, 0.25, 0.375, 0.4375, 0.46875, 0.453125, 0.4453125, 0.44921875, 0.447265625, 0.4462890625, 0.44580078125, 0.446044921875]\n","X: 0.446044921875\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import numpy as np\n","from matplotlib import pyplot as plt\n","\n","def fx(t):\n","    return ((t*np.power(2.1-0.5*t, 2))/((1-t)*(np.power((1.1-0.5*t), 2))))-3.69\n","\n","def biseccion(a, b, cota):\n","    error = 1\n","    i = 0\n","    listar = [1, 10]\n","    if fx(a)*fx(b) < 0:\n","        while error > cota:\n","            xr = (a+b)/2\n","            fxr = fx(xr)\n","            fxa = fx(a)\n","            \n","            if fxr * fxa < 0:\n","                b = xr\n","            elif fxr * fxa > 0:\n","                a = xr\n","            else:\n","                break\n","            listar.append(xr)\n","            xractual = xr\n","            \n","            if(len(listar) >= 2):\n","                xranterior = listar[-2]\n","                error = np.abs((xractual-xranterior)/xractual)\n","            else:\n","                error = 1\n","            i += 1\n","    else:\n","        print(\"NO EXISTE SOLUCION\")\n","    return listar\n","\n","raices = biseccion(0, 1, 0.001)\n","print(raices)\n","print(\"X:\", raices[-1])\n","\n","#Grafica\n","\n","vect = np.arange(-1, 1, 0.1)\n","plt.plot(vect, fx(vect))\n","plt.grid(\"X\")\n","plt.grid(\"Y\")\n","plt.show()"]}]}